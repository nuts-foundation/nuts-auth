// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/services/services.go

// Package services is a generated GoMock package.
package services

import (
	gomock "github.com/golang/mock/gomock"
	contract "github.com/nuts-foundation/nuts-auth/pkg/contract"
	services "github.com/nuts-foundation/nuts-auth/pkg/services"
	nuts_go_core "github.com/nuts-foundation/nuts-go-core"
	irmago "github.com/privacybydesign/irmago"
	server "github.com/privacybydesign/irmago/server"
	http "net/http"
	reflect "reflect"
)

// MockContractValidator is a mock of ContractValidator interface
type MockContractValidator struct {
	ctrl     *gomock.Controller
	recorder *MockContractValidatorMockRecorder
}

// MockContractValidatorMockRecorder is the mock recorder for MockContractValidator
type MockContractValidatorMockRecorder struct {
	mock *MockContractValidator
}

// NewMockContractValidator creates a new mock instance
func NewMockContractValidator(ctrl *gomock.Controller) *MockContractValidator {
	mock := &MockContractValidator{ctrl: ctrl}
	mock.recorder = &MockContractValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockContractValidator) EXPECT() *MockContractValidatorMockRecorder {
	return m.recorder
}

// ValidateContract mocks base method
func (m *MockContractValidator) ValidateContract(contract string, format services.ContractFormat, actingPartyCN string) (*services.ContractValidationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateContract", contract, format, actingPartyCN)
	ret0, _ := ret[0].(*services.ContractValidationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateContract indicates an expected call of ValidateContract
func (mr *MockContractValidatorMockRecorder) ValidateContract(contract, format, actingPartyCN interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateContract", reflect.TypeOf((*MockContractValidator)(nil).ValidateContract), contract, format, actingPartyCN)
}

// ValidateJwt mocks base method
func (m *MockContractValidator) ValidateJwt(contract, actingPartyCN string) (*services.ContractValidationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateJwt", contract, actingPartyCN)
	ret0, _ := ret[0].(*services.ContractValidationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateJwt indicates an expected call of ValidateJwt
func (mr *MockContractValidatorMockRecorder) ValidateJwt(contract, actingPartyCN interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateJwt", reflect.TypeOf((*MockContractValidator)(nil).ValidateJwt), contract, actingPartyCN)
}

// IsInitialized mocks base method
func (m *MockContractValidator) IsInitialized() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsInitialized")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsInitialized indicates an expected call of IsInitialized
func (mr *MockContractValidatorMockRecorder) IsInitialized() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsInitialized", reflect.TypeOf((*MockContractValidator)(nil).IsInitialized))
}

// MockContractSessionHandler is a mock of ContractSessionHandler interface
type MockContractSessionHandler struct {
	ctrl     *gomock.Controller
	recorder *MockContractSessionHandlerMockRecorder
}

// MockContractSessionHandlerMockRecorder is the mock recorder for MockContractSessionHandler
type MockContractSessionHandlerMockRecorder struct {
	mock *MockContractSessionHandler
}

// NewMockContractSessionHandler creates a new mock instance
func NewMockContractSessionHandler(ctrl *gomock.Controller) *MockContractSessionHandler {
	mock := &MockContractSessionHandler{ctrl: ctrl}
	mock.recorder = &MockContractSessionHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockContractSessionHandler) EXPECT() *MockContractSessionHandlerMockRecorder {
	return m.recorder
}

// SessionStatus mocks base method
func (m *MockContractSessionHandler) SessionStatus(session services.SessionID) (*services.SessionStatusResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SessionStatus", session)
	ret0, _ := ret[0].(*services.SessionStatusResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SessionStatus indicates an expected call of SessionStatus
func (mr *MockContractSessionHandlerMockRecorder) SessionStatus(session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionStatus", reflect.TypeOf((*MockContractSessionHandler)(nil).SessionStatus), session)
}

// StartSession mocks base method
func (m *MockContractSessionHandler) StartSession(request interface{}, handler server.SessionHandler) (*irmago.Qr, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSession", request, handler)
	ret0, _ := ret[0].(*irmago.Qr)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// StartSession indicates an expected call of StartSession
func (mr *MockContractSessionHandlerMockRecorder) StartSession(request, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSession", reflect.TypeOf((*MockContractSessionHandler)(nil).StartSession), request, handler)
}

// MockOAuthClient is a mock of OAuthClient interface
type MockOAuthClient struct {
	ctrl     *gomock.Controller
	recorder *MockOAuthClientMockRecorder
}

// MockOAuthClientMockRecorder is the mock recorder for MockOAuthClient
type MockOAuthClientMockRecorder struct {
	mock *MockOAuthClient
}

// NewMockOAuthClient creates a new mock instance
func NewMockOAuthClient(ctrl *gomock.Controller) *MockOAuthClient {
	mock := &MockOAuthClient{ctrl: ctrl}
	mock.recorder = &MockOAuthClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOAuthClient) EXPECT() *MockOAuthClientMockRecorder {
	return m.recorder
}

// CreateAccessToken mocks base method
func (m *MockOAuthClient) CreateAccessToken(request services.CreateAccessTokenRequest) (*services.AccessTokenResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessToken", request)
	ret0, _ := ret[0].(*services.AccessTokenResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessToken indicates an expected call of CreateAccessToken
func (mr *MockOAuthClientMockRecorder) CreateAccessToken(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessToken", reflect.TypeOf((*MockOAuthClient)(nil).CreateAccessToken), request)
}

// CreateJwtBearerToken mocks base method
func (m *MockOAuthClient) CreateJwtBearerToken(request services.CreateJwtBearerTokenRequest) (*services.JwtBearerTokenResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJwtBearerToken", request)
	ret0, _ := ret[0].(*services.JwtBearerTokenResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJwtBearerToken indicates an expected call of CreateJwtBearerToken
func (mr *MockOAuthClientMockRecorder) CreateJwtBearerToken(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJwtBearerToken", reflect.TypeOf((*MockOAuthClient)(nil).CreateJwtBearerToken), request)
}

// IntrospectAccessToken mocks base method
func (m *MockOAuthClient) IntrospectAccessToken(token string) (*services.NutsAccessToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IntrospectAccessToken", token)
	ret0, _ := ret[0].(*services.NutsAccessToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IntrospectAccessToken indicates an expected call of IntrospectAccessToken
func (mr *MockOAuthClientMockRecorder) IntrospectAccessToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntrospectAccessToken", reflect.TypeOf((*MockOAuthClient)(nil).IntrospectAccessToken), token)
}

// Configure mocks base method
func (m *MockOAuthClient) Configure() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configure")
	ret0, _ := ret[0].(error)
	return ret0
}

// Configure indicates an expected call of Configure
func (mr *MockOAuthClientMockRecorder) Configure() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockOAuthClient)(nil).Configure))
}

// MockContractClient is a mock of ContractClient interface
type MockContractClient struct {
	ctrl     *gomock.Controller
	recorder *MockContractClientMockRecorder
}

// MockContractClientMockRecorder is the mock recorder for MockContractClient
type MockContractClientMockRecorder struct {
	mock *MockContractClient
}

// NewMockContractClient creates a new mock instance
func NewMockContractClient(ctrl *gomock.Controller) *MockContractClient {
	mock := &MockContractClient{ctrl: ctrl}
	mock.recorder = &MockContractClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockContractClient) EXPECT() *MockContractClientMockRecorder {
	return m.recorder
}

// CreateContractSession mocks base method
func (m *MockContractClient) CreateContractSession(sessionRequest services.CreateSessionRequest) (*services.CreateSessionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContractSession", sessionRequest)
	ret0, _ := ret[0].(*services.CreateSessionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContractSession indicates an expected call of CreateContractSession
func (mr *MockContractClientMockRecorder) CreateContractSession(sessionRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContractSession", reflect.TypeOf((*MockContractClient)(nil).CreateContractSession), sessionRequest)
}

// ContractSessionStatus mocks base method
func (m *MockContractClient) ContractSessionStatus(sessionID string) (*services.SessionStatusResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContractSessionStatus", sessionID)
	ret0, _ := ret[0].(*services.SessionStatusResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContractSessionStatus indicates an expected call of ContractSessionStatus
func (mr *MockContractClientMockRecorder) ContractSessionStatus(sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContractSessionStatus", reflect.TypeOf((*MockContractClient)(nil).ContractSessionStatus), sessionID)
}

// ContractByType mocks base method
func (m *MockContractClient) ContractByType(contractType contract.Type, language contract.Language, version contract.Version) (*contract.Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContractByType", contractType, language, version)
	ret0, _ := ret[0].(*contract.Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContractByType indicates an expected call of ContractByType
func (mr *MockContractClientMockRecorder) ContractByType(contractType, language, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContractByType", reflect.TypeOf((*MockContractClient)(nil).ContractByType), contractType, language, version)
}

// ValidateContract mocks base method
func (m *MockContractClient) ValidateContract(request services.ValidationRequest) (*services.ContractValidationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateContract", request)
	ret0, _ := ret[0].(*services.ContractValidationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateContract indicates an expected call of ValidateContract
func (mr *MockContractClientMockRecorder) ValidateContract(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateContract", reflect.TypeOf((*MockContractClient)(nil).ValidateContract), request)
}

// KeyExistsFor mocks base method
func (m *MockContractClient) KeyExistsFor(legalEntity nuts_go_core.PartyID) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyExistsFor", legalEntity)
	ret0, _ := ret[0].(bool)
	return ret0
}

// KeyExistsFor indicates an expected call of KeyExistsFor
func (mr *MockContractClientMockRecorder) KeyExistsFor(legalEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyExistsFor", reflect.TypeOf((*MockContractClient)(nil).KeyExistsFor), legalEntity)
}

// OrganizationNameByID mocks base method
func (m *MockContractClient) OrganizationNameByID(legalEntity nuts_go_core.PartyID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrganizationNameByID", legalEntity)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrganizationNameByID indicates an expected call of OrganizationNameByID
func (mr *MockContractClientMockRecorder) OrganizationNameByID(legalEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrganizationNameByID", reflect.TypeOf((*MockContractClient)(nil).OrganizationNameByID), legalEntity)
}

// Configure mocks base method
func (m *MockContractClient) Configure() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configure")
	ret0, _ := ret[0].(error)
	return ret0
}

// Configure indicates an expected call of Configure
func (mr *MockContractClientMockRecorder) Configure() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockContractClient)(nil).Configure))
}

// ContractValidatorInstance mocks base method
func (m *MockContractClient) ContractValidatorInstance() services.ContractValidator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContractValidatorInstance")
	ret0, _ := ret[0].(services.ContractValidator)
	return ret0
}

// ContractValidatorInstance indicates an expected call of ContractValidatorInstance
func (mr *MockContractClientMockRecorder) ContractValidatorInstance() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContractValidatorInstance", reflect.TypeOf((*MockContractClient)(nil).ContractValidatorInstance))
}

// HandlerFunc mocks base method
func (m *MockContractClient) HandlerFunc() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandlerFunc")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// HandlerFunc indicates an expected call of HandlerFunc
func (mr *MockContractClientMockRecorder) HandlerFunc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlerFunc", reflect.TypeOf((*MockContractClient)(nil).HandlerFunc))
}
