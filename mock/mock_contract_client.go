// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/contract.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	contract "github.com/nuts-foundation/nuts-auth/pkg/contract"
	services "github.com/nuts-foundation/nuts-auth/pkg/services"
	nuts_go_core "github.com/nuts-foundation/nuts-go-core"
	reflect "reflect"
)

// MockContractClient is a mock of ContractClient interface
type MockContractClient struct {
	ctrl     *gomock.Controller
	recorder *MockContractClientMockRecorder
}

// MockContractClientMockRecorder is the mock recorder for MockContractClient
type MockContractClientMockRecorder struct {
	mock *MockContractClient
}

// NewMockContractClient creates a new mock instance
func NewMockContractClient(ctrl *gomock.Controller) *MockContractClient {
	mock := &MockContractClient{ctrl: ctrl}
	mock.recorder = &MockContractClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockContractClient) EXPECT() *MockContractClientMockRecorder {
	return m.recorder
}

// CreateContractSession mocks base method
func (m *MockContractClient) CreateContractSession(sessionRequest services.CreateSessionRequest) (*services.CreateSessionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContractSession", sessionRequest)
	ret0, _ := ret[0].(*services.CreateSessionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContractSession indicates an expected call of CreateContractSession
func (mr *MockContractClientMockRecorder) CreateContractSession(sessionRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContractSession", reflect.TypeOf((*MockContractClient)(nil).CreateContractSession), sessionRequest)
}

// ContractSessionStatus mocks base method
func (m *MockContractClient) ContractSessionStatus(sessionID string) (*services.SessionStatusResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContractSessionStatus", sessionID)
	ret0, _ := ret[0].(*services.SessionStatusResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContractSessionStatus indicates an expected call of ContractSessionStatus
func (mr *MockContractClientMockRecorder) ContractSessionStatus(sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContractSessionStatus", reflect.TypeOf((*MockContractClient)(nil).ContractSessionStatus), sessionID)
}

// ContractByType mocks base method
func (m *MockContractClient) ContractByType(contractType contract.Type, language contract.Language, version contract.Version) (*contract.Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContractByType", contractType, language, version)
	ret0, _ := ret[0].(*contract.Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContractByType indicates an expected call of ContractByType
func (mr *MockContractClientMockRecorder) ContractByType(contractType, language, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContractByType", reflect.TypeOf((*MockContractClient)(nil).ContractByType), contractType, language, version)
}

// ValidateContract mocks base method
func (m *MockContractClient) ValidateContract(request services.ValidationRequest) (*services.ContractValidationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateContract", request)
	ret0, _ := ret[0].(*services.ContractValidationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateContract indicates an expected call of ValidateContract
func (mr *MockContractClientMockRecorder) ValidateContract(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateContract", reflect.TypeOf((*MockContractClient)(nil).ValidateContract), request)
}

// KeyExistsFor mocks base method
func (m *MockContractClient) KeyExistsFor(legalEntity nuts_go_core.PartyID) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyExistsFor", legalEntity)
	ret0, _ := ret[0].(bool)
	return ret0
}

// KeyExistsFor indicates an expected call of KeyExistsFor
func (mr *MockContractClientMockRecorder) KeyExistsFor(legalEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyExistsFor", reflect.TypeOf((*MockContractClient)(nil).KeyExistsFor), legalEntity)
}

// OrganizationNameByID mocks base method
func (m *MockContractClient) OrganizationNameByID(legalEntity nuts_go_core.PartyID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrganizationNameByID", legalEntity)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrganizationNameByID indicates an expected call of OrganizationNameByID
func (mr *MockContractClientMockRecorder) OrganizationNameByID(legalEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrganizationNameByID", reflect.TypeOf((*MockContractClient)(nil).OrganizationNameByID), legalEntity)
}
