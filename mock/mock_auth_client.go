// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/auth.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	contract "github.com/nuts-foundation/nuts-auth/pkg/contract"
	services "github.com/nuts-foundation/nuts-auth/pkg/services"
	reflect "reflect"
)

// MockAuthClient is a mock of AuthClient interface
type MockAuthClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthClientMockRecorder
}

// MockAuthClientMockRecorder is the mock recorder for MockAuthClient
type MockAuthClientMockRecorder struct {
	mock *MockAuthClient
}

// NewMockAuthClient creates a new mock instance
func NewMockAuthClient(ctrl *gomock.Controller) *MockAuthClient {
	mock := &MockAuthClient{ctrl: ctrl}
	mock.recorder = &MockAuthClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthClient) EXPECT() *MockAuthClientMockRecorder {
	return m.recorder
}

// OAuthClient mocks base method
func (m *MockAuthClient) OAuthClient() services.OAuthClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OAuthClient")
	ret0, _ := ret[0].(services.OAuthClient)
	return ret0
}

// OAuthClient indicates an expected call of OAuthClient
func (mr *MockAuthClientMockRecorder) OAuthClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OAuthClient", reflect.TypeOf((*MockAuthClient)(nil).OAuthClient))
}

// ContractClient mocks base method
func (m *MockAuthClient) ContractClient() services.ContractClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContractClient")
	ret0, _ := ret[0].(services.ContractClient)
	return ret0
}

// ContractClient indicates an expected call of ContractClient
func (mr *MockAuthClientMockRecorder) ContractClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContractClient", reflect.TypeOf((*MockAuthClient)(nil).ContractClient))
}

// ContractNotary mocks base method
func (m *MockAuthClient) ContractNotary() services.ContractNotary {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContractNotary")
	ret0, _ := ret[0].(services.ContractNotary)
	return ret0
}

// ContractNotary indicates an expected call of ContractNotary
func (mr *MockAuthClientMockRecorder) ContractNotary() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContractNotary", reflect.TypeOf((*MockAuthClient)(nil).ContractNotary))
}

// Signer mocks base method
func (m *MockAuthClient) Signer(signerID string) contract.Signer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signer", signerID)
	ret0, _ := ret[0].(contract.Signer)
	return ret0
}

// Signer indicates an expected call of Signer
func (mr *MockAuthClientMockRecorder) Signer(signerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signer", reflect.TypeOf((*MockAuthClient)(nil).Signer), signerID)
}
