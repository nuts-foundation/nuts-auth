// Package experimental provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package experimental

import (
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
	"net/http"
)

// ContractLanguage defines model for ContractLanguage.
type ContractLanguage string

// ContractResponse defines model for ContractResponse.
type ContractResponse struct {

	// Language of the contract in all caps
	Language ContractLanguage `json:"language"`

	// The contract message
	Message string `json:"message"`

	// Type of which contract to sign
	Type ContractType `json:"type"`

	// Version of the contract
	Version ContractVersion `json:"version"`
}

// ContractType defines model for ContractType.
type ContractType string

// ContractVersion defines model for ContractVersion.
type ContractVersion string

// CreateSignSessionRequest defines model for CreateSignSessionRequest.
type CreateSignSessionRequest struct {
	Means string `json:"means"`

	// Params are passed to the means. Should be documented in the means documentation.
	Params map[string]interface{} `json:"params"`

	// base64 encoded payload what needs to be signed
	Payload string `json:"payload"`
}

// CreateSignSessionResult defines model for CreateSignSessionResult.
type CreateSignSessionResult struct {

	// The means this session uses to sign.
	Means string `json:"means"`

	// A pointer to a signature session. This is an opaque value which only has meaning in the context of the signing means. Can be an URL, base64 encoded image of a QRCode etc.
	SessionPtr map[string]interface{} `json:"sessionPtr"`
}

// DrawUpContractRequest defines model for DrawUpContractRequest.
type DrawUpContractRequest struct {

	// Language of the contract in all caps
	Language ContractLanguage `json:"language"`

	// Identifier of the legalEntity as registered in the Nuts registry
	LegalEntity LegalEntity `json:"legalEntity"`

	// Type of which contract to sign
	Type ContractType `json:"type"`

	// The duration this contract is valid, starting from validFrom or current time if validFrom is omitted. Uses this node default when omitted. Valid time units are: 's', 'm', 'h'
	ValidDuration *string `json:"validDuration,omitempty"`

	// validFrom describes the time from which this contract should be considered valid. Current time is used when omitted.
	ValidFrom *string `json:"validFrom,omitempty"`

	// Version of the contract
	Version ContractVersion `json:"version"`
}

// GetSignSessionStatusResult defines model for GetSignSessionStatusResult.
type GetSignSessionStatusResult struct {

	// Status indicates the status of the signing proces. Values depend on the implementation of the signing means.
	Status string `json:"status"`

	// If the signature session is completed, this property contains the signature embedded in an w3c verifiable presentation
	VerifiablePresentation *VerifiablePresentation `json:"verifiablePresentation,omitempty"`
}

// LegalEntity defines model for LegalEntity.
type LegalEntity string

// SignatureVerificationRequest defines model for SignatureVerificationRequest.
type SignatureVerificationRequest struct {

	// If the signature session is completed, this property contains the signature embedded in an w3c verifiable presentation
	VerifiablePresentation VerifiablePresentation `json:"VerifiablePresentation"`
}

// SignatureVerificationResponse defines model for SignatureVerificationResponse.
type SignatureVerificationResponse bool

// VerifiablePresentation defines model for VerifiablePresentation.
type VerifiablePresentation struct {
	Context []string               `json:"@context"`
	Proof   map[string]interface{} `json:"proof"`
	Type    []string               `json:"type"`
}

// DrawUpContractJSONBody defines parameters for DrawUpContract.
type DrawUpContractJSONBody DrawUpContractRequest

// CreateSignSessionJSONBody defines parameters for CreateSignSession.
type CreateSignSessionJSONBody CreateSignSessionRequest

// VerifySignatureJSONBody defines parameters for VerifySignature.
type VerifySignatureJSONBody SignatureVerificationRequest

// DrawUpContractRequestBody defines body for DrawUpContract for application/json ContentType.
type DrawUpContractJSONRequestBody DrawUpContractJSONBody

// CreateSignSessionRequestBody defines body for CreateSignSession for application/json ContentType.
type CreateSignSessionJSONRequestBody CreateSignSessionJSONBody

// VerifySignatureRequestBody defines body for VerifySignature for application/json ContentType.
type VerifySignatureJSONRequestBody VerifySignatureJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Draw up a contract using a specified contract template, language and version
	// (PUT /internal/auth/experimental/contract/drawup)
	DrawUpContract(ctx echo.Context) error
	// Create a signing session for a supported means.
	// (POST /internal/auth/experimental/signature/session)
	CreateSignSession(ctx echo.Context) error
	// Get the current status of a signing session
	// (GET /internal/auth/experimental/signature/session/{sessionPtr})
	GetSignSessionStatus(ctx echo.Context, sessionPtr string) error
	// Verify a signature in the form of a verifiable credential
	// (PUT /internal/auth/experimental/signature/verify)
	VerifySignature(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DrawUpContract converts echo context to params.
func (w *ServerInterfaceWrapper) DrawUpContract(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DrawUpContract(ctx)
	return err
}

// CreateSignSession converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSignSession(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateSignSession(ctx)
	return err
}

// GetSignSessionStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetSignSessionStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "sessionPtr" -------------
	var sessionPtr string

	err = runtime.BindStyledParameter("simple", false, "sessionPtr", ctx.Param("sessionPtr"), &sessionPtr)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sessionPtr: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSignSessionStatus(ctx, sessionPtr)
	return err
}

// VerifySignature converts echo context to params.
func (w *ServerInterfaceWrapper) VerifySignature(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.VerifySignature(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.PUT("/internal/auth/experimental/contract/drawup", wrapper.DrawUpContract)
	router.POST("/internal/auth/experimental/signature/session", wrapper.CreateSignSession)
	router.GET("/internal/auth/experimental/signature/session/:sessionPtr", wrapper.GetSignSessionStatus)
	router.PUT("/internal/auth/experimental/signature/verify", wrapper.VerifySignature)

}

