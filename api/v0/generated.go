// Package v0 provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package v0

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
	externalRef0 "github.com/nuts-foundation/nuts-auth/api"
)

// CreateAccessTokenV0JSONBody defines parameters for CreateAccessTokenV0.
type CreateAccessTokenV0JSONBody externalRef0.CreateAccessTokenRequest

// CreateAccessTokenV0Params defines parameters for CreateAccessTokenV0.
type CreateAccessTokenV0Params struct {
	XSslClientCert   string  `json:"X-Ssl-Client-Cert"`
	XNutsLegalEntity *string `json:"X-Nuts-LegalEntity,omitempty"`
}

// VerifyAccessTokenV0Params defines parameters for VerifyAccessTokenV0.
type VerifyAccessTokenV0Params struct {
	Authorization string `json:"Authorization"`
}

// CreateSessionV0JSONBody defines parameters for CreateSessionV0.
type CreateSessionV0JSONBody externalRef0.ContractSigningRequest

// ValidateContractV0JSONBody defines parameters for ValidateContractV0.
type ValidateContractV0JSONBody externalRef0.ValidationRequest

// GetContractByTypeV0Params defines parameters for GetContractByTypeV0.
type GetContractByTypeV0Params struct {

	// The version of this contract. If omitted, the most recent version will be returned
	Version  *string `json:"version,omitempty"`
	Language *string `json:"language,omitempty"`
}

// CreateJwtBearerTokenV0JSONBody defines parameters for CreateJwtBearerTokenV0.
type CreateJwtBearerTokenV0JSONBody externalRef0.CreateJwtBearerTokenRequest

// CreateAccessTokenV0RequestBody defines body for CreateAccessTokenV0 for application/json ContentType.
type CreateAccessTokenV0JSONRequestBody CreateAccessTokenV0JSONBody

// CreateSessionV0RequestBody defines body for CreateSessionV0 for application/json ContentType.
type CreateSessionV0JSONRequestBody CreateSessionV0JSONBody

// ValidateContractV0RequestBody defines body for ValidateContractV0 for application/json ContentType.
type ValidateContractV0JSONRequestBody ValidateContractV0JSONBody

// CreateJwtBearerTokenV0RequestBody defines body for CreateJwtBearerTokenV0 for application/json ContentType.
type CreateJwtBearerTokenV0JSONRequestBody CreateJwtBearerTokenV0JSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create an access token based on the OAuth JWT Bearer flow.
	// This endpoint must be available to the outside world for other applications to request access tokens.
	// It requires a two-way TLS connection. The client certificate must be a sibling of the signing certificate of the given JWT.
	// The client certificate must be passed using a X-Ssl-Client-Cert header, PEM encoded and urlescaped.
	// (POST /auth/accesstoken)
	CreateAccessTokenV0(ctx echo.Context, params CreateAccessTokenV0Params) error
	// Verifies the access token given in the Authorization header (as bearer token). If it's a valid access token issued by this server, it'll return a 200 status code.
	// If it cannot be verified it'll return 403. Note that it'll not return the contents of the access token. The introspection API is for that.
	// (HEAD /auth/accesstoken/verify)
	VerifyAccessTokenV0(ctx echo.Context, params VerifyAccessTokenV0Params) error
	// CreateSessionHandler Initiates an IRMA signing session with the correct contract.
	// (POST /auth/contract/session)
	CreateSessionV0(ctx echo.Context) error
	// returns the result of the contract request
	// (GET /auth/contract/session/{id})
	SessionRequestStatusV0(ctx echo.Context, id string) error
	// Validate a Nuts Security Contract
	// (POST /auth/contract/validate)
	ValidateContractV0(ctx echo.Context) error
	// Get a contract by type and version
	// (GET /auth/contract/{contractType})
	GetContractByTypeV0(ctx echo.Context, contractType string, params GetContractByTypeV0Params) error
	// Create a JWT Bearer Token which can be used in the createAccessToken request in the assertion field
	// (POST /auth/jwtbearertoken)
	CreateJwtBearerTokenV0(ctx echo.Context) error
	// Introspection endpoint to retrieve information from an Access Token as described by RFC7662
	// (POST /auth/token_introspection)
	IntrospectAccessTokenV0(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateAccessTokenV0 converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAccessTokenV0(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateAccessTokenV0Params

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Ssl-Client-Cert" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Ssl-Client-Cert")]; found {
		var XSslClientCert string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Ssl-Client-Cert, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "X-Ssl-Client-Cert", valueList[0], &XSslClientCert)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Ssl-Client-Cert: %s", err))
		}

		params.XSslClientCert = XSslClientCert
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Ssl-Client-Cert is required, but not found"))
	}
	// ------------- Optional header parameter "X-Nuts-LegalEntity" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Nuts-LegalEntity")]; found {
		var XNutsLegalEntity string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Nuts-LegalEntity, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "X-Nuts-LegalEntity", valueList[0], &XNutsLegalEntity)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Nuts-LegalEntity: %s", err))
		}

		params.XNutsLegalEntity = &XNutsLegalEntity
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateAccessTokenV0(ctx, params)
	return err
}

// VerifyAccessTokenV0 converts echo context to params.
func (w *ServerInterfaceWrapper) VerifyAccessTokenV0(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params VerifyAccessTokenV0Params

	headers := ctx.Request().Header
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "Authorization", valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.VerifyAccessTokenV0(ctx, params)
	return err
}

// CreateSessionV0 converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSessionV0(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateSessionV0(ctx)
	return err
}

// SessionRequestStatusV0 converts echo context to params.
func (w *ServerInterfaceWrapper) SessionRequestStatusV0(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SessionRequestStatusV0(ctx, id)
	return err
}

// ValidateContractV0 converts echo context to params.
func (w *ServerInterfaceWrapper) ValidateContractV0(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ValidateContractV0(ctx)
	return err
}

// GetContractByTypeV0 converts echo context to params.
func (w *ServerInterfaceWrapper) GetContractByTypeV0(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contractType" -------------
	var contractType string

	err = runtime.BindStyledParameter("simple", false, "contractType", ctx.Param("contractType"), &contractType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contractType: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetContractByTypeV0Params
	// ------------- Optional query parameter "version" -------------

	err = runtime.BindQueryParameter("form", true, false, "version", ctx.QueryParams(), &params.Version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// ------------- Optional query parameter "language" -------------

	err = runtime.BindQueryParameter("form", true, false, "language", ctx.QueryParams(), &params.Language)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter language: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetContractByTypeV0(ctx, contractType, params)
	return err
}

// CreateJwtBearerTokenV0 converts echo context to params.
func (w *ServerInterfaceWrapper) CreateJwtBearerTokenV0(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateJwtBearerTokenV0(ctx)
	return err
}

// IntrospectAccessTokenV0 converts echo context to params.
func (w *ServerInterfaceWrapper) IntrospectAccessTokenV0(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.IntrospectAccessTokenV0(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/accesstoken", wrapper.CreateAccessTokenV0)
	router.HEAD(baseURL+"/auth/accesstoken/verify", wrapper.VerifyAccessTokenV0)
	router.POST(baseURL+"/auth/contract/session", wrapper.CreateSessionV0)
	router.GET(baseURL+"/auth/contract/session/:id", wrapper.SessionRequestStatusV0)
	router.POST(baseURL+"/auth/contract/validate", wrapper.ValidateContractV0)
	router.GET(baseURL+"/auth/contract/:contractType", wrapper.GetContractByTypeV0)
	router.POST(baseURL+"/auth/jwtbearertoken", wrapper.CreateJwtBearerTokenV0)
	router.POST(baseURL+"/auth/token_introspection", wrapper.IntrospectAccessTokenV0)

}

