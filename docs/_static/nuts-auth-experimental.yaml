openapi: 3.0.0
info:
  title: Nuts Auth Service API
  version: 1.0.0

paths:
  /auth/internal/experimental/sign:
    post:
      operationId: createSignSession
      summary: Create a signing session for a supported means.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSignSessionRequest"
      responses:
        201:
          description: When the signing session was successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateSignSessionResult"
  /auth/internal/experimental/sign/{sessionPtr}:
    get:
      operationId: getSignSessionStatus
      summary: Get the current status of a signing session
      parameters:
        - name: sessionPtr
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: When the sessionPtr is know. Contains the current session status.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSignSessionStatusResult"
        404:
          description: When the sessionPtr in unknown.
  #    delete:
  #      operationId: cancelSignSession
  #      responses:
  #        204:
  #          description: When the sessionPtr is known and the session was successfully deleted
  #        404:
  #          description: When the sessionPtr was unknown
  /auth/internal/experimental/contract/drawup:
    put:
      operationId: drawUpContract
      summary: Draw up a contract using a specified contract template, language and version
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DrawUpContractRequest"
      responses:
        200:
          description: When the contract was drawed up successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContractResponse"
        404:
          description: When the combination of template, language and version was not found
  /auth/internal/experimental/contract/template/{language}/{contractType}:
    get:
      operationId: getContractTemplate
      summary: Get the contract template by version, and type
      parameters:
        - name: language
          in: path
          required: true
          schema:
            type: string
            default: nl
        - name: contractType
          in: path
          required: true
          schema:
            type: string
        - name: version
          description: The version of this contract. If omitted, the most recent version will be returned
          required: false
          in: query
          schema:
            type: string
      responses:
        200:
          description: When the contract template could be found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContractTemplateResponse"
        404:
          description: When the contract template for the combination type and version could not be found

components:
  schemas:
    CreateSignSessionRequest:
      required:
        - means
        - payload
        - params
      properties:
        means:
          type: string
          enum: [ irma, dummy ]
          example: irma
        params:
          type: object
          description: Params are passed to the means. Should be documented in the means documentation.
        payload:
          type: string
          description: base64 encoded payload what needs to be signed

    CreateSignSessionResult:
      required:
        - sessionPtr
        - means
      properties:
        sessionPtr:
          description: A pointer to a signature session. This is an opaque value which only has meaning in the context of the signing means. Can be an URL, base64 encoded image of a QRCode etc.
          type: object
        means:
          description: The means this session uses to sign.
          type: string
          enum: [ irma, dummy ]
          example: irma

    GetSignSessionStatusResult:
      required:
        - status
      properties:
        status:
          description: Status indicates the status of the signing proces. Values depend on the implementation of the signing means.
          type: string
        verifiablePresentation:
          $ref: "#/components/schemas/VerifiablePresentation"

    VerifiablePresentation:
      description: If the signature session is completed, this property contains the signature embedded in an w3c verifiable presentation
      type: object
      required:
        - "@context"
        - type
        - proof
      properties:
        "@context":
          type: array
          items:
            type: string
        type:
          type: array
          items:
            type: string
        proof:
          type: object

    ContractType:
      type: string
      description: "Type of which contract to sign"
      example: "BehandelaarLogin"
    ContractLanguage:
      type: string
      description: "Language of the contract in all caps"
      example: "NL"
    ContractVersion:
      type: string
      description: "Version of the contract"
      example: "v1"
    LegalEntity:
      type: string
      description: "Identifier of the legalEntity as registered in the Nuts registry"
      example: "urn:oid:2.16.840.1.113883.2.4.6.1:48000000"

    ContractTemplateResponse:
      required:
        - type
        - version
        - language
        - template
      properties:
        type:
          $ref: "#/components/schemas/ContractType"
        language:
          $ref: "#/components/schemas/ContractLanguage"
        version:
          $ref: "#/components/schemas/ContractVersion"
        template:
          type: string
          example: ik verklaar dat ${acting_party} namens mij request mag maken

    ContractResponse:
      required:
        - message
        - type
        - version
        - language
      properties:
        message:
          type: string
          description: The contract message
          example: ik verklaar dat Pro Gen - Italia namens mij request mag maken
        type:
          $ref: "#/components/schemas/ContractType"
        language:
          $ref: "#/components/schemas/ContractLanguage"
        version:
          $ref: "#/components/schemas/ContractVersion"

    DrawUpContractRequest:
      required:
        - type
        - version
        - language
        - legalEntity
      properties:
        type:
          $ref: "#/components/schemas/ContractType"
        language:
          $ref: "#/components/schemas/ContractLanguage"
        version:
          $ref: "#/components/schemas/ContractVersion"
        legalEntity:
          $ref: "#/components/schemas/LegalEntity"
        validFrom:
          type: string
          description: "validFrom describes the time from which this contract should be considered valid. Current time is used when omitted."
          example: "2019-06-24T14:32:00+02:00"
        validDuration:
          type: string
          description: "The duration this contract is valid, starting from validFrom or current time if validFrom is omitted. Uses this node default when omitted. Valid time units are: 's', 'm', 'h'"
          example: "2h"
