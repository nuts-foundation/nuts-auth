openapi: 3.0.0
info:
  title: Nuts Service API Proxy
  version: 0.0.1
paths:
  '/auth/contract/session':
    post:
      operationId: createSessionV0
      summary: CreateSessionHandler Initiates an IRMA signing session with the correct contract.
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "./nuts-auth-model.yaml#/components/schemas/ContractSigningRequest"
      responses:
        '400':
          description: the given information is invalid
          content:
            text/plain:
              schema:
                $ref: "./nuts-auth-model.yaml#/components/schemas/ErrorString"
        '201':
          description: session with given info for signature has been created and resulting info can be used to render a QR code
          content:
            application/json:
              schema:
                $ref: "./nuts-auth-model.yaml#/components/schemas/CreateSessionResult"
  /auth/contract/session/{id}:
    get:
      operationId: sessionRequestStatusV0
      summary: returns the result of the contract request
      tags:
        - auth
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The result contains session information such as the session status, type, possible errors and disclosed attributes or attribute-based signature if appropriate to the session type
          content:
            application/json:
              schema:
                $ref: "./nuts-auth-model.yaml#/components/schemas/SessionResult"
        '404':
          description: session id not found
          content:
            text/plain:
              schema:
                $ref: "./nuts-auth-model.yaml#/components/schemas/ErrorString"
  /auth/contract/validate:
    post:
      operationId: validateContractV0
      summary: Validate a Nuts Security Contract
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "./nuts-auth-model.yaml#/components/schemas/ValidationRequest"
      responses:
        '200':
          description: if the token is valid
          content:
            application/json:
              schema:
                $ref: "./nuts-auth-model.yaml#/components/schemas/ValidationResult"
        '400':
          description: the given information is invalid
          content:
            text/plain:
              example: could not decode json
              schema:
                $ref: "./nuts-auth-model.yaml#/components/schemas/ErrorString"
  /auth/contract/{contractType}:
    get:
      operationId: getContractByTypeV0
      summary: Get a contract by type and version
      tags:
        - auth
      parameters:
        - name: contractType
          in: path
          required: true
          schema:
            type: string
        - name: version
          description: The version of this contract. If omitted, the most recent version will be returned
          required: false
          in: query
          schema:
            type: string
        - name: language
          in: query
          required: false
          schema:
            type: string
            default: nl
      responses:
        '404':
          description: if no contract exists
          content:
            text/plain:
              schema:
                $ref: "./nuts-auth-model.yaml#/components/schemas/ErrorString"
        '200':
          description: Returns the contract of this type, version and language
          content:
            application/json:
              schema:
                $ref: "./nuts-auth-model.yaml#/components/schemas/Contract"
  /auth/accesstoken:
    post:
      operationId: createAccessTokenV0
      summary: |
        Create an access token based on the OAuth JWT Bearer flow.
        This endpoint must be available to the outside world for other applications to request access tokens.
        It requires a two-way TLS connection. The client certificate must be a sibling of the signing certificate of the given JWT.
        The client certificate must be passed using a X-Ssl-Client-Cert header, PEM encoded and urlescaped.
      tags:
        - auth
      parameters:
        - name: X-Ssl-Client-Cert
          in: header
          required: true
          schema:
            type: string
        - name: X-Nuts-LegalEntity
          in: header
          required: false
          deprecated: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "./nuts-auth-model.yaml#/components/schemas/CreateAccessTokenRequest"
          application/json:
            schema:
              $ref: "./nuts-auth-model.yaml#/components/schemas/CreateAccessTokenRequest"
      responses:
        '200':
          description: The posted JWT is valid. Responds with access token
          content:
            application/json:
              schema:
                $ref: "./nuts-auth-model.yaml#/components/schemas/AccessTokenResponse"
        '400':
          description: The posted JWT is invalid.
          content:
            application/json:
              schema:
                $ref: "./nuts-auth-model.yaml#/components/schemas/AccessTokenRequestFailedResponse"
  /auth/accesstoken/verify:
    head:
      operationId: verifyAccessTokenV0
      summary: |
        Verifies the access token given in the Authorization header (as bearer token). If it's a valid access token issued by this server, it'll return a 200 status code.
        If it cannot be verified it'll return 403. Note that it'll not return the contents of the access token. The introspection API is for that.
      tags:
        - auth
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The access token is valid. It has been signed by this server.
        '403':
          description: The given access token is invalid or couldn't be verified.
  /auth/jwtbearertoken:
    post:
      operationId: createJwtBearerTokenV0
      summary: Create a JWT Bearer Token which can be used in the createAccessToken request in the assertion field
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "./nuts-auth-model.yaml#/components/schemas/CreateJwtBearerTokenRequest"
      responses:
        '200':
          description: Successfull request. Responds with JWT encoded Bearer Token
          content:
            application/json:
              schema:
                $ref: "./nuts-auth-model.yaml#/components/schemas/JwtBearerTokenResponse"
  /auth/token_introspection:
    post:
      operationId: introspectAccessTokenV0
      summary: Introspection endpoint to retrieve information from an Access Token as described by RFC7662
      tags:
        - auth
        - private
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "./nuts-auth-model.yaml#/components/schemas/TokenIntrospectionRequest"
      responses:
        '200':
          description: An Introspection response as described in RFC7662 section 2.2
          content:
            application/json:
              schema:
                $ref: "./nuts-auth-model.yaml#/components/schemas/TokenIntrospectionResponse"
